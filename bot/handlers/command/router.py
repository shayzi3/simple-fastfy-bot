from aiogram import Router
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from bot.utils.filter.state import SearchState
from bot.utils.inline import settings_button, inventory_button
from bot.schemas import UserDataclass
from .service import CommandService


command_router = Router(name="command_router")


@command_router.message(CommandStart())
async def start(
     message: Message,
     user: UserDataclass,
     service: CommandService
):
     if user is None:
          await service.start(telegram_id=message.from_user.id)
     await message.answer("–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ CS2. –ü—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /help")
     
     

@command_router.message(Command("settings"))
async def settings(
     message: Message,
     user: UserDataclass
):
     await message.answer(
          text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
          reply_markup=await settings_button(
               notify_status=user.notify,
               update_time=user.update_time.pretty_string
          )
     )
     
     
   
@command_router.message(Command("skip"))
async def clear(
     message: Message,
     state: FSMContext
):
     get_state = await state.get_state()
     if get_state is not None:
          await state.clear()
          return await message.answer("–°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
     return await message.answer("–°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")



@command_router.message(Command("search"))
async def search(
     message: Message,
     state: FSMContext
):
     await state.set_state(SearchState.item)
     await message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞")
     
    
     
@command_router.message(Command("inventory"))
async def inventory(
     message: Message,
     user: UserDataclass,
):
     if not user.skins:
          return await message.answer("–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç")
     
     await message.answer(
          text="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
          reply_markup=await inventory_button(
               skins=user.sorted_skin_by_6(),
               index=0
          )
     )
     
     
@command_router.message(Command("help"))
async def help(message: Message):
     await message.answer(
          text=(
               "ü§ñ –ë–æ—Ç —É–º–µ–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ —Å–∫–∏–Ω—ã"
               "–∏ —Å–æ–æ–±—â–∞—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞."
               "\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"
               "–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /search."
               "–¢–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞,"
               "–µ—Å–ª–∏ —Ü–µ–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç, –≤ –±–æ–ª—å—à—É—é"
               "–∏–ª–∏ –º–µ–Ω—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É, —Ç–æ –ø–æ—Å—Ç—É–ø–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±"
               "–∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, –Ω—É–∂–Ω–æ"
               "–ø–µ—Ä–µ–∫–ª—é—á–∏—Å—Ç—å —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ `Enabled`. –ï—â—ë –æ–¥–Ω–æ–π –∏–∑"
               "—Ñ—É–Ω–∫—Ü–∏–π —è–≤–ª—è–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤. days-hours-minutes"
               "–ü—Ä–∏–º–µ—Ä: 0-0-35, —Ç–æ–µ—Å—Ç—å –∫–∞–∂–¥—ã–µ 35 –º–∏–Ω—É—Ç –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å"
               "—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤."
          )
     )