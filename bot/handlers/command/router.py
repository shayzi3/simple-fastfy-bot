from aiogram import Router
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from bot.schemas import UserDataclass
from bot.utils.filter.state import SearchState, SteamIDState
from bot.utils.inline import inventory_button_or_chart, settings_button

command_router = Router(name="command_router")


@command_router.message(CommandStart())
async def start(message: Message,):
     await message.answer(
          "–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ CS2. –ü—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /help"
     )
     
     

@command_router.message(Command("settings"))
async def settings(
     message: Message,
     user: UserDataclass
):
     await message.answer(
          text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
          reply_markup=await settings_button(
               notify_status=user.notify,
               update_time=user.update_time.pretty_string
          )
     )
     
     
   
@command_router.message(Command("skip"))
async def clear(
     message: Message,
     state: FSMContext
):
     get_state = await state.get_state()
     if get_state is not None:
          await state.clear()
          return await message.answer("–°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
     return await message.answer("–°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")



@command_router.message(Command("search"))
async def search(
     message: Message,
     state: FSMContext
):
     await state.set_state(SearchState.item)
     await message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞")
     
    
     
@command_router.message(Command("inventory"))
async def inventory(
     message: Message,
     user: UserDataclass,
):
     if not user.skins:
          return await message.answer("–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç")
     
     await message.answer(
          text="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
          reply_markup=await inventory_button_or_chart(
               skins=user.sorted_skin_by_6(),
               index=0,
               mode="inventory_item"
          )
     )
     
     
@command_router.message(Command("help"))
async def help(message: Message):
     bot_description = "ü§ñ –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Å–∫–∏–Ω—ã"

     functions = [
          "üîç <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
          "üìä <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã</b>\n–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞. –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤ –±–æ–ª—å—à—É—é –∏–ª–∏ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
          "üîî <b>–í–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ `Enabled`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.",
          "‚è∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ days-hours-minutes. –ù–∞–ø—Ä–∏–º–µ—Ä, 0-0-35 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 35 –º–∏–Ω—É—Ç."
     ]

     msg = f"{bot_description}\n\n" + "\n\n".join(functions)
     await message.answer(text=msg, parse_mode=ParseMode.HTML)
     
     
     
@command_router.message(Command("chart"))
async def chart(
     message: Message,
     user: UserDataclass
):
     if not user.skins:
          return await message.answer("–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç")
     
     await message.answer(
          text="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
          reply_markup=await inventory_button_or_chart(
               skins=user.sorted_skin_by_6(),
               index=0,
               mode="chart_item"
          )
     )
     
     
     
@command_router.message(Command("steam"))
async def steam(
     message: Message,
     state: FSMContext
):
     await state.set_state(SteamIDState.steamid)
     await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π SteamID")